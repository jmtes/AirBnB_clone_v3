type Query {
  user(id: ID!): User!
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  loginUser(data: LoginUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!
}

# type Subscription {
# }

type AuthPayload {
  user: User!
  token: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

type User {
  id: ID!
  email: String
  password: String
  name: String!
  avatar: String
  bio: String
  listings: [Listing!]!
  reviews: [Review!]!
  reservations: [Reservation!]
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
